/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.mysql.jdbc.PreparedStatement;
import com.yourcompany.struts.form.UserForm;

import java.util.Date;
import javax.servlet.RequestDispatcher;

/**
 * MyEclipse Struts Creation date: 07-07-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/user" name="userForm" input="/login.jsp"
 *                scope="request"
 */
public class loginAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		HttpSession session = request.getSession(true);

		String username = userForm.getUsername();
		String password = userForm.getPassword();
		String valcode = userForm.getValcode();

		ActionForward forward = null;

		// get the varcode from authImg
		String ver2 = (String) session.getAttribute("rand");

		String validateMsg = null;
		if (valcode.equals(ver2)) {
			validateMsg = "The validate code is correct";
			String strSql = "select * from userinfo where username= ?";

			Connection con = null;
			Statement st = null;
			java.sql.PreparedStatement prepStmt = null;
			ResultSet rsLogon = null;

			int secNum = 4;

			try {
				// get the datasource
				DataSource dataSource = getDataSource(request, "datasource");
				// get connection
				con = dataSource.getConnection();
				// execute query
				st = con.createStatement();
				prepStmt = con.prepareStatement(strSql);
				prepStmt.setString(1, username);
				rsLogon = prepStmt.executeQuery();
				String dbPassword = null;
				String userID = null;
				if (rsLogon.next()) {
					System.out.println("Usernanme exists.");
					dbPassword = rsLogon.getString("password");
					userID = rsLogon.getString("userID");

					// check userID
					if (userID == null) {
						System.out.println("get userID failed.");
					} else {
						System.out.println("get userID:" + userID);
					}
				} else {
					System.out.println("Username doesn't exists");
				}
				if (dbPassword == null || !dbPassword.equals(password)) {
					System.out.println("login fail");
					forward = mapping.findForward("LoginFail");
				} else {
					Date curDate = new Date(); // get current time
					int[] priv = new int[secNum]; // record the privilege of
													// each section
					int privsum = 0; // the total privilege

					/*
					 * generate and run sql sentence to get all user's
					 * subscription by its ID
					 */
					strSql = "select * from purchaseinfo where userID=?";
					prepStmt = con.prepareStatement(strSql);
					prepStmt.setString(1, userID);
					rsLogon = prepStmt.executeQuery();

					/*
					 * get the section user has subscripted and its available
					 * time generate the current total privilege of reading
					 */
					while (rsLogon.next()) {
						String section = rsLogon.getString("section");
						Date startTime = rsLogon.getDate("starttime");
						Date expireTime = rsLogon.getDate("expiretime");
						// System.out.println(section+","+startTime+","+expireTime);
						if (startTime.getTime() <= curDate.getTime()
								&& curDate.getTime() <= expireTime.getTime()) {
							int i;
							for (i = 0; i < 4; i++) {
								if (section.equals(String.valueOf(i + 1))
										&& priv[i] == 0) {
									// if the user owns the section now, add its
									// privilege
									privsum = (int) (privsum + Math.pow(2, i));
									priv[i] = 1;

									// print the current information
									System.out.println("section " + section
											+ ", from " + startTime + " to "
											+ expireTime
											+ ", the current time is "
											+ curDate
											+ ", the privilege sum is:"
											+ privsum);
								}
							}
						}
					}

					// change the privilege to String and update the database
					String privilegeCateloge = String.valueOf(privsum);

					strSql = "update userinfo set privilegeCateloge = ? where userID = ?";
					prepStmt = con.prepareStatement(strSql);
					prepStmt.setString(1, privilegeCateloge);
					prepStmt.setString(2, userID);
					prepStmt.executeUpdate();
					System.out.println("update privilege successfully.");

					String Kx = null, Ky = null;
					strSql = "select * from ki where ID=?";
					prepStmt = con.prepareStatement(strSql);
					prepStmt.setString(1, privilegeCateloge);
					rsLogon = prepStmt.executeQuery();
					if (rsLogon.next()) {
						System.out.println("Ki exists.");
						Kx = rsLogon.getString("Kx");
						Ky = rsLogon.getString("Ky");
						System.out.println("get Kx and Ky");

					} else {
						System.out.println("Ki doesn't exists");
					}

					try {
						PrintWriter out = response.getWriter();
						out
								.println("<html><head><script>function setCookie1(c_name,value,expiredays){var exdate=new Date();exdate.setDate(exdate.getDate()+expiredays);document.cookie=c_name+ \"=\" +escape(value)+((expiredays==null) ? \"\" : \";expires=\"+exdate.toGMTString());parent.location.href='LoginSuc.jsp'}</script></head><body onload=\"setCookie1('userID','"
										+ userID
										+ "',365),setCookie1('privilegeCateloge','"
										+ privilegeCateloge
										+ "',365),setCookie1('Kx','"
										+ Kx
										+ "',365),setCookie1('Ky','"
										+ Ky
										+ "',365)\"></body></html>");

					} catch (Exception ee) {
					}

				}
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}

		} else{
			validateMsg = "The validate code is not match";
			forward = mapping.findForward("LoginFail2");
			
		}

			return forward;
	}
}